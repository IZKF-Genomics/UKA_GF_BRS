id: demux_bclconvert
description: Demultiplex Illumina BCLs using bcl-convert, with optional FastQC, fastq_screen, and MultiQC.

params:
  bcl_dir:
    type: str
    required: true
    cli: "--bcl"
    exists: dir
    description: "Input BCL run directory (contains RunInfo.xml)"
  use_api_samplesheet:
    type: bool
    default: true
    cli: "--api-samplesheet"
    description: "Fetch SampleSheet.csv from the GF API"
  gf_api_name:
    type: str
    cli: "--api-user"
    description: "GF API username for SampleSheet retrieval"
  gf_api_pass:
    type: str
    cli: "--api-pass"
    description: "GF API password or token"
  run_fastq_screen:
    type: bool
    default: false
    cli: "--fastq-screen"
    description: "Run fastq_screen after demultiplexing"
  reserve_cores:
    type: int
    default: 10
    description: "Cores to reserve for the system (not used by bcl-convert)"
  threads_fraction:
    type: float
    default: 0.33
    description: "Fraction of available cores to give to bcl-convert"
  no_lane_splitting:
    type: bool
    default: true
    description: "Do not split FASTQs by lane (single file per read)"
  sampleproject_subdirs:
    type: bool
    default: false
    description: "Organize FASTQs under SampleProject/ subdirectories"
  extra_bclconvert_args:
    type: str
    default: ""
    description: "Extra arguments passed directly to bcl-convert"


tools:
  required: [bcl-convert]
  optional: [fastqc, fastq_screen, multiqc]

render:
  into: "${ctx.project_dir}/${ctx.template.id}/"
  files:
    - samplesheet.csv -> samplesheet.csv
    - run.sh.j2 -> run.sh

run:
  entry: "run.sh"

hooks:
  post_render:
    - hooks.get_api_samplesheet:main

publish:
  multiqc_report:
    resolver: "resolvers.get_multiqc_report"
  FASTQ_dir:
    resolver: "resolvers.get_FASTQ_folder"
