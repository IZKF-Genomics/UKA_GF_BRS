#!/usr/bin/env bash
set -euo pipefail

{% if ctx.params.get("flowcell_id") %}
echo "Flowcell ID         : {{ ctx.params.flowcell_id }}"
{% endif %}
echo "Thread ratio        : {{ ctx.params.thread_ratio }}"
echo "FASTQ subdirs       : {{ 'true' if ctx.params.sampleproject_subdirs else 'false' }}"
echo "fastq_screen        : {{ 'enabled' if ctx.params.run_fastq_screen else 'disabled' }}"

# Derive per-stage threads from the current host using the bundled helper.
THREADS=$(bash "$(dirname "${BASH_SOURCE[0]}")/get_threads.sh" "{{ ctx.params.thread_ratio }}")
# Split the pool roughly 1/3–1/3–remainder, never dropping below 1.
sub_threads=$(( THREADS / 3 ))
(( sub_threads < 1 )) && sub_threads=1

# Switch to the render target (project mode or ad-hoc output).
RUN_DIR="{% if ctx.project %}{{ ctx.project_dir }}/{{ ctx.template.id }}{% else %}{{ ctx.cwd }}{% endif %}"
mkdir -p "$RUN_DIR"
cd "$RUN_DIR"

DEST_DIR="{{ '.' if ctx.params.sampleproject_subdirs else './output' }}"

# Primary demultiplexing step.
bcl-convert \
  --bcl-input-directory "{{ ctx.params.bcl_dir }}" \
  --output-directory "$DEST_DIR" \
  --sample-sheet "./samplesheet.csv" \
  --bcl-sampleproject-subdirectories "{{ 'true' if ctx.params.sampleproject_subdirs else 'false' }}" \
  --no-lane-splitting "{{ 'true' if ctx.params.no_lane_splitting else 'false' }}" \
  --bcl-num-conversion-threads "$sub_threads" \
  --bcl-num-compression-threads "$sub_threads" \
  --bcl-num-decompression-threads "$sub_threads"

# Run FastQC in parallel across the generated FASTQs.
mkdir -p fastqc
find . -maxdepth 2 -type f -name "*.fastq.gz" -print0 | \
 parallel -0 -j "$IDLE_CPUS" "fastqc {} -o fastqc"

{% if ctx.params.run_fastq_screen %}
# Optional contamination screen.
echo "Running fastq_screen..."
mkdir -p fastq_screen
find . -maxdepth 2 -type f -name "*.fastq.gz" -print0 | \
  parallel -0 -j "$IDLE_CPUS" "fastq_screen --outdir fastq_screen {}"
{% endif %}

# Summarise everything with MultiQC once fastqs are ready.
mkdir -p multiqc
multiqc -f . -o multiqc

# Clean up intermediate directories
[[ -d fastqc ]] && rm -rf fastqc
{% if ctx.params.run_fastq_screen %}
[[ -d fastq_screen ]] && rm -rf fastq_screen
{% endif %}
