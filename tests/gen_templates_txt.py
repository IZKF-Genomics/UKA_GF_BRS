#!/usr/bin/env python3
from __future__ import annotations
import sys
from pathlib import Path
from collections import defaultdict, deque

try:
    import yaml  # type: ignore
except Exception:
    print("Please install PyYAML: pip install pyyaml", file=sys.stderr)
    sys.exit(1)

ROOT = Path(__file__).resolve().parents[1]
TPL_DIR = ROOT / "templates"
OUT = ROOT / "tests" / "templates.txt"
PARAMS_FILE = ROOT / "tests" / "params.yaml"


def read_descriptor(p: Path) -> dict:
    return yaml.safe_load(p.read_text())


def find_descriptors() -> dict[str, dict]:
    out: dict[str, dict] = {}
    if not TPL_DIR.exists():
        return out
    for d in sorted(TPL_DIR.iterdir()):
        if not d.is_dir():
            continue
        cand = d / "template_config.yaml"
        if not cand.exists():
            cand = d / "template.config.yaml"
            if not cand.exists():
                continue
        data = read_descriptor(cand) or {}
        tid = data.get("id") or d.name
        deps = data.get("required_templates") or data.get("requires") or []
        out[tid] = {"id": tid, "deps": list(deps)}
    return out


def topo_sort(nodes: dict[str, dict]) -> list[str]:
    indeg: dict[str, int] = defaultdict(int)
    graph: dict[str, list[str]] = defaultdict(list)
    all_ids = set(nodes.keys())
    for tid, info in nodes.items():
        for dep in info["deps"]:
            graph[dep].append(tid)
            indeg[tid] += 1
            all_ids.add(dep)
    q = deque([n for n in all_ids if indeg[n] == 0])
    order: list[str] = []
    while q:
        n = q.popleft()
        if n in nodes:  # ignore deps not present locally
            order.append(n)
        for nbr in graph[n]:
            indeg[nbr] -= 1
            if indeg[nbr] == 0:
                q.append(nbr)
    seen = set(order)
    for tid in nodes.keys():
        if tid not in seen:
            order.append(tid)
    return order


def load_params() -> dict[str, str]:
    if not PARAMS_FILE.exists():
        return {}
    data = yaml.safe_load(PARAMS_FILE.read_text()) or {}
    out: dict[str, str] = {}
    for tid, spec in (data.get("templates") or {}).items():
        args: list[str] = []
        for k, v in (spec.get("params") or {}).items():
            args += ["--param", f"{k}={v}"]
        out[tid] = " ".join(args)
    return out


def main() -> None:
    nodes = find_descriptors()
    if not nodes:
        print("No templates found under templates/", file=sys.stderr)
        sys.exit(1)
    order = topo_sort(nodes)
    params = load_params()
    lines = [
        "# templates.txt â€” generated by tests/gen_templates_txt.py",
        "# One template per line; optional CLI params appended after the id",
        "# Lines starting with '#' are ignored by smoke.sh",
        "",
    ]
    for tid in order:
        args = params.get(tid, "")
        lines.append(f"{tid} {args}".rstrip())
    OUT.write_text("\n".join(lines) + "\n")
    print(f"[ok] Wrote {OUT} ({len(order)} templates)")


if __name__ == "__main__":
    main()
